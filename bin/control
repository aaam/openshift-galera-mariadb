#!/bin/bash

source $OPENSHIFT_CARTRIDGE_SDK_BASH

export STOPTIMEOUT=10

# Run mariadb commands
function run_sql {
  echo "$@" | $OPENSHIFT_MARIADB_DIR/usr/mariadb/bin/mysql --basedir=$OPENSHIFT_MARIADB_DIR/usr/mariadb/ -h $OPENSHIFT_MARIADB_DB_HOST -P $OPENSHIFT_MARIADB_DB_PORT -u $OPENSHIFT_MARIADB_DB_USERNAME --password='$OPENSHIFT_MARIADB_DB_PASSWORD' --skip-column-names
}

function is_running {
  pidfile=$OPENSHIFT_MARIADB_DIR/pid/mariadb.pid

  if [ -f $pidfile ]; then
    mariadb_pid=`cat $pidfile 2> /dev/null`
    myid=`id -u`

    if `ps --pid $mariadb_pid > /dev/null 2>&1` || `pgrep -x mysqld_safe -u $myid > /dev/null 2>&1`
    then
      return 0
    fi
  fi

  return 1
}

# This function gets called by the subscribe hook to initialize the DB
function init_db {

	# Hooks should be doing all the checks, but we'll do one last test.
	if fgrep -q "2" $OPENSHIFT_MARIADB_DIR/env/OPENSHIFT_MARIADB_INIT_DB
	then

	## 
	#
	# Starting the galera cluster is a three step process:
	#   1. Start all the nodes and provision their initial database and login details
	#   2. Restart the first node to initiate the galera cluster
	#   3. Join the other hosts to the cluster
	#
	##

	dbname=$OPENSHIFT_APP_NAME
	socket_file=$OPENSHIFT_MARIADB_DB_SOCKET
	username=$OPENSHIFT_MARIADB_DB_USERNAME
	password=$OPENSHIFT_MARIADB_DB_PASSWORD

	# We MUST run mysql from this dir or else it will fail
        cd $OPENSHIFT_MARIADB_DIR/usr/mariadb
	
	# Start MariaDB (standalone) - mysqld_safe doesn't seem to like non-galera startup
	./bin/mysqld --defaults-file=$OPENSHIFT_MARIADB_DIR/conf/my.cnf > /dev/null 2>&1 &

	# Wait for MariaDB to Start
	sleep 15

	# Drop the test database and create our application's database
	echo "drop database test;
	create database \`${dbname}\` DEFAULT CHARACTER SET utf8 DEFAULT COLLATE utf8_general_ci;" | ./bin/mysql -u root -S ${socket_file} > /dev/null || error 'Failed to create database' 188

	# Delete the test user and create our admin user from the generated_username and generated_password
	echo "                                  
	delete from user;
	grant all on *.* to '$username'@'%' identified by '$password' with grant option;
	flush privileges;" | ./bin/mysql -u root -S ${socket_file} mysql > /dev/null || error "Failed to setup initial root user" 187

	# DB-INIT Complete
	echo "3" > $OPENSHIFT_MARIADB_DIR/env/OPENSHIFT_MARIADB_INIT_DB

	# Check init_db
	fi
}

# Start mysqld and block until it comes up.
function start {

# Hooks should be doing all the checks, but we'll do one last test.
if fgrep -q "3" $OPENSHIFT_MARIADB_DIR/env/OPENSHIFT_MARIADB_INIT_DB
then
  if ! is_running; then
    echo "Starting MariaDB cartridge"
    oo-erb $OPENSHIFT_MARIADB_DIR/conf/my.cnf.erb.hidden > $OPENSHIFT_MARIADB_DIR/conf/my.cnf
    
    active_gears=(`cat $OPENSHIFT_MARIADB_DIR/env/OPENSHIFT_MARIADB_GALERA_GEARS`)

    # Sort the array so everyone has a standard
    declare -a sortarray
    # Use a temp file 
    echo '' > $OPENSHIFT_MARIADB_DIR/env/OPENSHIFT_MARIADB_TEMP_ARRAY
    for i in ${active_gears[@]}; do
         echo $i >> $OPENSHIFT_MARIADB_DIR/env/OPENSHIFT_MARIADB_TEMP_ARRAY
        `sort $OPENSHIFT_MARIADB_DIR/env/OPENSHIFT_MARIADB_TEMP_ARRAY -o $OPENSHIFT_MARIADB_DIR/env/OPENSHIFT_MARIADB_TEMP_ARRAY`
    done

    while read line; do
        sortarray=(${sortarray[@]} $line)
    done < $OPENSHIFT_MARIADB_DIR/env/OPENSHIFT_MARIADB_TEMP_ARRAY

	# Loop through our newly sorted array
	for i in ${sortarray[@]}; 
	do 
		# Ignore own host
		if [ "$OPENSHIFT_GEAR_DNS:$OPENSHIFT_MARIADB_NODE_GALERA_PORT_1" == $i ] 
		then
			# We are matched
			echo "We matched ourselves in the array"
			break
		fi
		# test if other gears are accessible (nc not available)
		# if nc -w 5 $(echo $i | tr ":" "\n") 2>/dev/null

		# test if other gears are accessible
		echo "quit" | telnet $(echo $i | tr ":" "\n") | grep Connected > /dev/null 2>&1
		if [ "$?" -ne "1" ]; #Ok
		then
			echo "Someone else is alive in the cluster"
			# If anyone else is online, lets break from the loop
			break
		fi
		
		# Wait for our turn
		sleep 10
	done

	# Just in case! Safe>Split-Brain
	sleep `shuf -i 5-20 -n 1`

    # Build up our array of online gears
    online_gears=''
    for i in ${active_gears[@]}; 
    do 
	# Ignore own host
	if [ "$OPENSHIFT_GEAR_DNS:$OPENSHIFT_MARIADB_NODE_GALERA_PORT_1" == $i ] 
	then
		continue
	fi
	# test if other gears are accessible (nc not available)
	# if nc -w 5 $(echo $i | tr ":" "\n") 2>/dev/null

	# test if other gears are accessible
	echo "quit" | telnet $(echo $i | tr ":" "\n") | grep Connected > /dev/null 2>&1
	if [ "$?" -ne "1" ]; #Ok
	then
		online_gears="$online_gears,$i"
	else
		client_result "Warning: $i is not responding! The node which hosts this gear may be offline - ignore this message if you're just starting the cluster."
	fi
    done
        
    # We MUST run mysqld_safe from this dir or else it will fail
    cd $OPENSHIFT_MARIADB_DIR/usr/mariadb
    
    # Remove the leading , (if exists)
    online_gears=`echo $online_gears | sed 's/^,//'`

    # Generate the dynamic wsrep_cluster_addresses (none prints out as 1)
    if [ `echo $online_gears | sed 's/[^,]//g' | wc -c` -lt 2 ] && [[ -z "$online_gears" ]];
    then
    	echo 'Initial Startup (first host)'
        ./bin/mysqld_safe --defaults-file=$OPENSHIFT_MARIADB_DIR/conf/my.cnf --wsrep_cluster_address='gcomm://' > /dev/null 2>&1 &
    else
    	echo 'Adding more hosts to the cluster'
        ./bin/mysqld_safe --defaults-file=$OPENSHIFT_MARIADB_DIR/conf/my.cnf --wsrep_cluster_address="gcomm://$online_gears" > /dev/null 2>&1 &
    fi

    wait_for_mysqld_availability

  else
    echo "MariaDB already running" 1>&2
  fi
else
  echo "db-init hasn't been executed yet!"
fi
}

function wait_for_mysqld_availability {
  test_select=${1:-false}

  for i in {1..30}; do
    if is_running; then
      if $test_select; then
        run_sql 'select 1' 2> /dev/null && return 0
      else
        return 0
      fi
    fi

    sleep 1
  done
  return 1
}

function stop {
  if is_running; then
    pidfile=$OPENSHIFT_MARIADB_DIR/pid/mariadb.pid

    if [ -f $pidfile ]; then
      echo "Stopping MariaDB cartridge"
      pid=$( /bin/cat $pidfile )
      /bin/kill $pid
      ret=$?
      if [ $ret -eq 0 ]; then
        TIMEOUT="$STOPTIMEOUT"
        while [ $TIMEOUT -gt 0 ] && [ -f "$pidfile" ]
        do
          /bin/kill -0 "$pid" >/dev/null 2>&1 || break
          sleep 1
          let TIMEOUT=${TIMEOUT}-1
        done
      fi
    else
      if `pgrep -x mysqld_safe > /dev/null 2>&1`; then
        echo "Warning: MariaDB process exists without a pid file.  Use force-stop to kill." 1>&2
      else
          echo "MariaDB already stopped" 1>&2
      fi
    fi
  fi
}

function status {
  if is_running; then
    client_result "MariaDB is running" 
  else
    client_result "MariaDB is stopped" 
  fi

  exit 0
}

function pre_snapshot {
  start
  # The following call is necessary due to race conditions that can arise if mariadb
  # is recovering from a force-stop
  wait_for_mysqld_availability true

  echo "$OPENSHIFT_MARIADB_DB_USERNAME" > $OPENSHIFT_DATA_DIR/mariadb_db_username
  echo "$OPENSHIFT_MARIADB_DB_HOST" > $OPENSHIFT_DATA_DIR/mariadb_db_host
  echo "$OPENSHIFT_APP_NAME" > $OPENSHIFT_DATA_DIR/mariadb_db_dbname

  dump_file=$OPENSHIFT_DATA_DIR/mariadb_dump_snapshot.gz
  local db_host=$OPENSHIFT_MARIADB_DB_HOST
  local db_port=$OPENSHIFT_MARIADB_DB_PORT

  {
    $OPENSHIFT_MARIADB_DIR/usr/mariadb/bin/mysqldump --extended-insert --quick -h $db_host -P $db_port -u $OPENSHIFT_MARIADB_DB_USERNAME --password='$OPENSHIFT_MARIADB_DB_PASSWORD' --all-databases --events --triggers --routines --add-drop-table | /bin/gzip > $dump_file
  } ||
  {
    warning "Couldn't not dump mariadb! Continuing anyway"
    /bin/rm -rf $OPENSHIFT_DATA_DIR/mariadb_dump_snapshot.gz
  }

  stop
}

function post_snapshot {
  true
}

function pre_restore {
  cleanup_dump
}

function post_restore {
  # Ensure a snapshot file exists
  if [ -f $OPENSHIFT_DATA_DIR/mariadb_dump_snapshot.gz ]; then
    start

    # Restore stashed variables and get current variables
    OLD_IP=$(< $OPENSHIFT_DATA_DIR/mariadb_db_host)
    NEW_IP=$OPENSHIFT_MARIADB_DB_HOST
    OLD_NAME=$(< $OPENSHIFT_DATA_DIR/mariadb_db_dbname)
    NEW_NAME=$OPENSHIFT_APP_NAME

    if [ -s $OPENSHIFT_DATA_DIR/mariadb_db_username ]; then
      OLD_USER=$(< $OPENSHIFT_DATA_DIR/mariadb_db_username)
    else
      OLD_USER="admin"
    fi
    NEW_USER=$OPENSHIFT_MARIADB_DB_USERNAME

    # Drop and recreate current database
    # Need to use backticks here to make sure name is properly escaped
    run_sql "DROP DATABASE IF EXISTS \`$NEW_NAME\`;" || error "Could not drop existing database" 187
    run_sql "CREATE DATABASE \`$NEW_NAME\`;" || error "Could not create database" 187

    # Restore the old database verbatim, this will be using the old database name
    # Pipe this command directly to mariadb instead of using run_sql so that we don't have to create a massive string to hold the sql dump file
    # TODO: Ideally this would pipe directly into run_sql, but I have yet to get it to work
    {
      (
        echo "SET AUTOCOMMIT=0;"
        echo "SET UNIQUE_CHECKS=0;"
        echo "SET FOREIGN_KEY_CHECKS=0;"
        /bin/zcat $OPENSHIFT_DATA_DIR/mariadb_dump_snapshot.gz
        echo "SET FOREIGN_KEY_CHECKS=1;"
        echo "SET UNIQUE_CHECKS=1;"
        echo "SET AUTOCOMMIT=1;"
        echo "COMMIT;"
      ) | $OPENSHIFT_MARIADB_DIR/usr/mariadb/bin/mysql -h $OPENSHIFT_MARIADB_DB_HOST -P $OPENSHIFT_MARIADB_DB_PORT -u $OPENSHIFT_MARIADB_DB_USERNAME --password='$OPENSHIFT_MARIADB_DB_PASSWORD' --skip-column-names
    } || error "Could not import MariaDB Database" 187


    # Grant permissions to the current user
    run_sql "
    GRANT ALL ON *.* TO '$NEW_USER'@'$NEW_IP' IDENTIFIED BY '$OPENSHIFT_MARIADB_DB_PASSWORD' WITH GRANT OPTION;
    GRANT ALL ON *.* TO '$NEW_USER'@'%' IDENTIFIED BY '$OPENSHIFT_MARIADB_DB_PASSWORD' WITH GRANT OPTION;
    " || error "Could not grant permissions for MariaDB database" 187

    # Only run the following if the username is different
    if [ "${OLD_USER}" != "${NEW_USER}" ]
    then
      # Remove the user from any grants that it has
      {
        for host in $(run_sql "SELECT Host from mysql.user WHERE user.user='${OLD_USER}'")
        do
          run_sql "DROP USER \`$OLD_USER\`@'${host}';" || warning "Could not drop old user" 187
        done
      }
    fi

    # Refresh the privileges
    run_sql "FLUSH PRIVILEGES;" || error "Could not flush privileges" 187

    # Only run the following if the database name has changed
    if [ "${OLD_NAME}" == "${NEW_NAME}" ]
    then
      warning "Old and new names are the same, no need to rename"
    else
      # Dump the old database and restore it into the new database
      # This approach provides relational consistency and will work with tables, views, triggers, etc
      # TODO: This may not work if the user created another database that has references to this database
      {
	$OPENSHIFT_MARIADB_DIR/usr/mariadb/bin/mysqldump -h $NEW_IP -P $OPENSHIFT_MARIADB_DB_PORT -u $NEW_USER --password='$OPENSHIFT_MARIADB_DB_PASSWORD' $OLD_NAME | \
          $OPENSHIFT_MARIADB_DIR/usr/mariadb/bin/mysql -h $NEW_IP -P $OPENSHIFT_MARIADB_DB_PORT -u $NEW_USER --password='$OPENSHIFT_MARIADB_DB_PASSWORD' $NEW_NAME
      } || error "Could not rename database" 187

      # Drop the old database now that the data has been preserved
      run_sql "DROP DATABASE \`$OLD_NAME\`;" || error "Could not drop old database" 187
    fi

    cleanup_dump
  else
    echo "MariaDB restore attempted but no dump found!" 1>&2
    echo "$OPENSHIFT_DATA_DIR/mariadb_dump_snapshot.gz does not exist" 1>&2
  fi
}

function cleanup_dump {
  rm -f $OPENSHIFT_DATA_DIR/mariadb_dump_snapshot.gz
  rm -f $OPENSHIFT_DATA_DIR/mariadb_db_host
  rm -f $OPENSHIFT_DATA_DIR/mariadb_db_username
  rm -f $OPENSHIFT_DATA_DIR/mariadb_db_dbname
}

case "$1" in
  init-db)
    init_db
  ;;
  start)
    start
  ;;
  stop)
    stop
  ;;
  status)
    status
  ;;
  restart)
    stop
    start
  ;;
  pre-snapshot)
    pre_snapshot
  ;;
  post-snapshot)
    post_snapshot
  ;;
  pre-restore)
    pre_restore
  ;;
  post-restore)
    post_restore
  ;;
esac

